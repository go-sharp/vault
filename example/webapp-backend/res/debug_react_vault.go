// +build debug

// This file is generated by the vault-cli command line utility.
// It offers a easy way to embed binary resources into a go executable.
// DO NOT EDIT this file, it will be overwritten on the next run of the vault-cli utility.

package res

import (
	"fmt"
	"os"
	"path"
	"strings"
	"time"
)

type memFile struct {
	f    *os.File
	stat os.FileInfo
	path string
	base string
}

func (m memFile) Size() int64 {
	return m.stat.Size()
}

func (m memFile) Name() string {
	return m.stat.Name()
}

func (m memFile) ModTime() time.Time {
	return m.stat.ModTime()
}

func (m memFile) Path() string {
	return m.path
}

func (m memFile) Read(p []byte) (n int, err error) {
	return m.f.Read(p)
}

func (m memFile) Close() error {
	return m.f.Close()
}

type debugLoader struct {
	base string
}

func (d debugLoader) Load(name string) (File, error) {
	if !strings.HasPrefix(name, "/") {
		name = "/" + name
	}

	f, err := os.Open(getFullPath(d.base, name))
	if err != nil {
		return nil, err
	}

	stat, err := f.Stat()
	if err != nil {
		return nil, err
	}

	return &memFile{base: d.base, path: path.Clean(strings.TrimSuffix(name, stat.Name())), f: f, stat: stat}, nil
}

func getFullPath(b, p string) string {
	return path.Clean(fmt.Sprintf("%v/%v", b, path.Clean("/"+p)))
}

// NewReactLoader returns a new AssetLoader for the React resources.
func NewReactLoader() AssetLoader {
	return &debugLoader{base: "../webapp-frontend/build"}
}
