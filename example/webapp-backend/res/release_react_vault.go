// +build !debug

// This file is generated by the vault-cli command line utility.
// It offers a easy way to embed binary resources into a go executable.
// DO NOT EDIT this file, it will be overwritten on the next run of the vault-cli utility.

package res

import (
	"compress/zlib"
	"io"
	"os"
	"strings"
	"time"
)

var vaultAssetBinReact = ""
var mf File = &memFile{}

type fileInfo memFile

func (f fileInfo) Name() string {
	return f.name
}

func (f fileInfo) Size() int64 {
	return f.size
}

func (f fileInfo) Mode() os.FileMode {
	return 0444
}

func (f fileInfo) ModTime() time.Time {
	return f.modTime
}

func (f fileInfo) IsDir() bool {
	return false
}

func (f fileInfo) Sys() interface{} {
	return nil
}

type memFile struct {
	r       io.ReadCloser
	rOffset int64
	offset  int64
	name    string
	modTime time.Time
	path    string
	length  int64
	size    int64
}

// Readdir see os.File Readdir function
func (m memFile) Readdir(count int) ([]os.FileInfo, error) {
	return []os.FileInfo{}, io.EOF
}

func (m memFile) Close() error {
	return m.r.Close()
}
func (m memFile) Read(p []byte) (n int, err error) {
	return m.r.Read(p)
}

func (m memFile) Seek(offset int64, whence int) (int64, error) {
	m.r.
		panic("not implemented")
}

func (m memFile) Stat() (os.FileInfo, error) {
	return fileInfo(m), nil
}

type loader struct {
	fm map[string]memFile
}

func (l loader) Load(name string) (File, error) {
	if !strings.HasPrefix(name, "/") {
		name = "/" + name
	}

	if v, ok := l.fm[name]; ok {
		r, err := zlib.NewReader(strings.NewReader(vaultAssetBinReact[v.offset : v.offset+v.length]))
		if err != nil {
			return nil, err
		}
		v.r = r
		return &v, nil
	}
	return nil, ErrNotFound
}

// NewReactLoader returns a new AssetLoader for the React resources.
func NewReactLoader() AssetLoader {
	loader := &loader{
		fm: map[string]memFile{
			"/asset-manifest.json": memFile{offset: 0,
				name:    "asset-manifest.json",
				modTime: time.Unix(1527796009, 0),
				path:    "/",
				size:    257,
				length:  122,
			},
			"/favicon.ico": memFile{offset: 122,
				name:    "favicon.ico",
				modTime: time.Unix(1527796004, 0),
				path:    "/",
				size:    3870,
				length:  3646,
			},
			"/index.html": memFile{offset: 3768,
				name:    "index.html",
				modTime: time.Unix(1527796009, 0),
				path:    "/",
				size:    548,
				length:  343,
			},
			"/manifest.json": memFile{offset: 4111,
				name:    "manifest.json",
				modTime: time.Unix(1527796004, 0),
				path:    "/",
				size:    317,
				length:  212,
			},
			"/service-worker.js": memFile{offset: 4323,
				name:    "service-worker.js",
				modTime: time.Unix(1527796009, 0),
				path:    "/",
				size:    3235,
				length:  1349,
			},
			"/static/css/main.4ba88f14.css": memFile{offset: 5672,
				name:    "main.4ba88f14.css",
				modTime: time.Unix(1527796009, 0),
				path:    "/static/css",
				size:    752,
				length:  340,
			},
			"/static/css/main.4ba88f14.css.map": memFile{offset: 6012,
				name:    "main.4ba88f14.css.map",
				modTime: time.Unix(1527796009, 0),
				path:    "/static/css",
				size:    1520,
				length:  619,
			},
			"/static/js/main.8d71e87d.js": memFile{offset: 6631,
				name:    "main.8d71e87d.js",
				modTime: time.Unix(1527796009, 0),
				path:    "/static/js",
				size:    119028,
				length:  38047,
			},
			"/static/js/main.8d71e87d.js.map": memFile{offset: 44678,
				name:    "main.8d71e87d.js.map",
				modTime: time.Unix(1527796009, 0),
				path:    "/static/js",
				size:    483623,
				length:  150076,
			},
			"/static/media/logo.5d5d9eef.svg": memFile{offset: 194754,
				name:    "logo.5d5d9eef.svg",
				modTime: time.Unix(1527796009, 0),
				path:    "/static/media",
				size:    2671,
				length:  1281,
			},
		},
	}
	return loader
}
